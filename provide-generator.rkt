#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 23 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 1 6 #"wxloc\0"
          0 0 72 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 5 #"Hack\0"
0 10 92 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 5 #"Hack\0"
0.0 11 90 -1 90 -1 1 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 119 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 204 204
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 144 179 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 204 221 170
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 178 178 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1085 0 29 3 16 #"#lang racket/gui"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 11 #";;; purpose"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; to generate the provide form from a module file"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 17 3 83
(
 #"; parse every define form, use (read) and pick the first list item o"
 #"r function name"
) 0 0 25 29 1 #"\n"
0 0 17 3 41 #"; must be some form of syntax parser, say"
0 0 25 29 1 #"\n"
0 0 17 3 120
(
 #"; build a copy of the definition with (function param param ...) whi"
 #"ch is the second item in the define form syntax list"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #"; a better way would be to edit the syntax and delete the function b"
 #"odies."
) 0 0 25 29 1 #"\n"
0 0 17 3 98
(
 #"; and syntax->string to convert the resulting syntax-list back into "
 #"a string with indentation etc."
) 0 0 25 29 1 #"\n"
0 0 17 3 31 #"; 1) read source to syntax list"
0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #"; 2) map recursive function to produce syntax list without function "
 #"body"
) 0 0 25 29 1 #"\n"
0 0 17 3 31 #"; 3) save with syntax->string.b"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 8 #";;; defs"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 2 #" ("
0 0 14 3 8 #"composex"
0 0 25 3 1 #" "
0 0 14 3 3 #"stx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 53 #"; macro to compose functions passing an 'x' parameter"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 11 #"syntax-case"
0 0 25 3 1 #" "
0 0 14 3 3 #"stx"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 2 #"f1"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 11 #"with-syntax"
0 0 25 3 3 #" (["
0 0 14 3 5 #"x-var"
0 0 25 3 2 #" ("
0 0 14 3 13 #"datum->syntax"
0 0 25 3 1 #" "
0 0 14 3 3 #"stx"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 8 #"compose1"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 5 #"x-var"
0 0 25 3 2 #") "
0 0 14 3 2 #"f1"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 17 3 11 #"; unit test"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 3 #" (("
0 0 14 3 8 #"composex"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string-replace"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 15 #"string-downcase"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 11 #"string-trim"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #")) "
0 0 19 3 11 #"\"Naice Day\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 19 3 11 #"\"naice-day\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"get-clipboard"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 39 #"; returns the contents of the clipboard"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"send"
0 0 25 3 1 #" "
0 0 14 3 13 #"the-clipboard"
0 0 25 3 1 #" "
0 0 14 3 20 #"get-clipboard-string"
0 0 25 3 2 #" ("
0 0 14 3 20 #"current-milliseconds"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"set-clipboard"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 45 #"; sets the clipboard with the provided string"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"send"
0 0 25 3 1 #" "
0 0 14 3 13 #"the-clipboard"
0 0 25 3 1 #" "
0 0 14 3 20 #"set-clipboard-string"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #" ("
0 0 14 3 20 #"current-milliseconds"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"get-stx-lines"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 59
#"; returns a list of syntax objects from the provided string"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"syntax->list"
0 0 25 3 2 #" ("
0 0 15 3 22 #"with-input-from-string"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 25 3 2 #" ("
0 0 14 3 14 #"string-replace"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"#lang racket/gui\""
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 25 3 2 #") "
0 0 14 3 11 #"read-syntax"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"stx->str"
0 0 25 3 1 #" "
0 0 14 3 3 #"stx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 55 #"; converts a syntax object to string with no extra info"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"~a"
0 0 25 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 14 3 3 #"stx"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 23 #"get-function-macro-name"
0 0 25 3 1 #" "
0 0 14 3 8 #"stx-line"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 46 #"; extract the possible function name of a line"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 11 #"syntax-list"
0 0 25 3 9 #"        ("
0 0 14 3 12 #"syntax->list"
0 0 25 3 1 #" "
0 0 14 3 8 #"stx-line"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 35 #"))                                 "
0 0 17 3 53 #"; make sure syntax list contains at least two objects"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (("
0 0 14 3 3 #"2nd"
0 0 25 3 10 #"         ("
0 0 14 3 6 #"second"
0 0 25 3 3 #"   "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 10 #"1st-string"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"stx->str"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 4 #"    "
0 0 14 3 11 #"syntax-list"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 10 #"2nd-string"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"stx->str"
0 0 25 3 1 #" "
0 0 14 3 3 #"2nd"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 14 3 10 #"1st-string"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"define\""
0 0 25 3 3 #") ("
0 0 14 3 14 #"string-prefix?"
0 0 25 3 1 #" "
0 0 14 3 10 #"2nd-string"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 25 3 3 #")) "
0 0 17 3 2 #"; "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 29 #"this is a function definition"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 8 #"stx->str"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 25 3 1 #" "
0 0 14 3 3 #"2nd"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                (("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 14 3 10 #"1st-string"
0 0 25 3 1 #" "
0 0 19 3 15 #"\"define-syntax\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 14 3 10 #"2nd-string"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 19 3 2 #"\"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 28 #"get-length-of-longest-string"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 52 #"; returns the length of the longest string in list l"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 3 #"max"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 13 #"string-length"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"println"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 46 #"; prints a non-empty line with carriage return"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 17 #"non-empty-string?"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 25 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"generate-provide-line"
0 0 25 3 1 #" "
0 0 14 3 8 #"stx-line"
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 69
(
 #"; returns a complete provide line as string from a single syntax lin"
 #"e"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 11 #"syntax-list"
0 0 25 3 10 #"         ("
0 0 14 3 12 #"syntax->list"
0 0 25 3 1 #" "
0 0 14 3 8 #"stx-line"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 40 #"))                                      "
0 0 17 3 53 #"; make sure syntax list contains at least two objects"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (("
0 0 14 3 3 #"1st"
0 0 25 3 11 #"          ("
0 0 14 3 5 #"first"
0 0 25 3 4 #"    "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"2nd"
0 0 25 3 11 #"          ("
0 0 14 3 6 #"second"
0 0 25 3 3 #"   "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 10 #"1st-string"
0 0 25 3 4 #"   ("
0 0 14 3 8 #"stx->str"
0 0 25 3 1 #" "
0 0 14 3 3 #"1st"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 10 #"2nd-string"
0 0 25 3 4 #"   ("
0 0 14 3 8 #"stx->str"
0 0 25 3 1 #" "
0 0 14 3 3 #"2nd"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 15 3 11 #"definition?"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 14 3 10 #"1st-string"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"define\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 6 #"macro?"
0 0 25 3 8 #"       ("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 14 3 10 #"1st-string"
0 0 25 3 1 #" "
0 0 19 3 15 #"\"define-syntax\""
0 0 25 3 17 #"))               "
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 11 #"param-list?"
0 0 25 3 3 #"  ("
0 0 14 3 14 #"string-prefix?"
0 0 25 3 1 #" "
0 0 14 3 10 #"2nd-string"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 15 #"macro-tag-maybe"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 6 #"macro?"
0 0 25 3 1 #" "
0 0 19 3 10 #"\" [MACRO]\""
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 14 #"provide-indent"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"         \""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 1 #" "
0 0 15 3 11 #"definition?"
0 0 25 3 1 #" "
0 0 14 3 6 #"macro?"
0 0 25 3 47 #")                                              "
0 0 17 3 60
#"; if this is a function or a macro with parameter definition"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 14 3 11 #"param-list?"
0 0 25 3 38 #")                                     "
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (("
0 0 14 3 13 #"function-name"
0 0 25 3 4 #"   ("
0 0 14 3 8 #"stx->str"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 25 3 1 #" "
0 0 14 3 3 #"2nd"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 15 #"function-length"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 12 #"space-length"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 1 #" "
0 0 14 3 15 #"function-length"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 1 #" "
0 0 14 3 15 #"function-length"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 6 #"spacer"
0 0 25 3 11 #"          ("
0 0 14 3 11 #"make-string"
0 0 25 3 1 #" "
0 0 14 3 12 #"space-length"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 17 #")))              "
0 0 17 3 23 #"; extract function name"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 14 3 14 #"provide-indent"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 14 3 6 #"spacer"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #" ; \""
0 0 25 3 1 #" "
0 0 14 3 10 #"2nd-string"
0 0 25 3 1 #" "
0 0 14 3 15 #"macro-tag-maybe"
0 0 25 3 5 #"))   "
0 0 17 3 48 #"; return function name followed by function def."
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 9         169 22           0 0           0 27 0 25 3 1 #"("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (("
0 0 14 3 3 #"3rd"
0 0 25 3 10 #"         ("
0 0 14 3 5 #"third"
0 0 25 3 4 #"    "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 10 #"3rd-string"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"stx->str"
0 0 25 3 1 #" "
0 0 14 3 3 #"3rd"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 14 3 10 #"2nd-string"
0 0 25 3 1 #" "
0 0 19 3 7 #"\" ; = \""
0 0 25 3 1 #" "
0 0 14 3 10 #"3rd-string"
0 0 25 3 2 #"))"
0           0 0 0 25 3 6 #"      "
0 0 17 3 47 #"; possible way of handling variable definitions"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 )"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                (("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 6 #"macro?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 11 #"param-list?"
0 0 25 3 46 #"))                                            "
0 0 17 3 2 #"; "
0 0 17 3 58
#"if this is a macro definition with no parameter definition"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (("
0 0 14 3 10 #"macro-name"
0 0 25 3 1 #" "
0 0 14 3 10 #"2nd-string"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 12 #"macro-length"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 1 #" "
0 0 14 3 10 #"macro-name"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 12 #"space-length"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 1 #" "
0 0 14 3 12 #"macro-length"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 1 #" "
0 0 14 3 12 #"macro-length"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 6 #"spacer"
0 0 25 3 11 #"          ("
0 0 14 3 11 #"make-string"
0 0 25 3 1 #" "
0 0 14 3 12 #"space-length"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 14 3 14 #"provide-indent"
0 0 25 3 1 #" "
0 0 14 3 10 #"macro-name"
0 0 25 3 1 #" "
0 0 14 3 6 #"spacer"
0 0 25 3 1 #" "
0 0 19 3 6 #"\" ; (\""
0 0 25 3 1 #" "
0 0 14 3 10 #"macro-name"
0 0 25 3 1 #" "
0 0 19 3 8 #"\" ... )\""
0 0 25 3 1 #" "
0 0 14 3 15 #"macro-tag-maybe"
0 0 25 3 4 #"))) "
0 0 17 3 39 #"; return macro name followed by comment"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 19 3 2 #"\"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"close-parenthesis"
0 0 25 3 1 #" "
0 0 14 3 15 #"pre-indentation"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 16 #"post-indentation"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 84
(
 #"; adds a parenthesis after the last item in a list of code lines, be"
 #"fore its comment"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (("
0 0 14 3 15 #"last-line-clean"
0 0 25 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 25 3 2 #" ("
0 0 14 3 4 #"last"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 9 #"last-word"
0 0 25 3 8 #"       ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string-split"
0 0 25 3 1 #" "
0 0 14 3 15 #"last-line-clean"
0 0 25 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 12 #"last-comment"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 16 #"string-contains?"
0 0 25 3 1 #" "
0 0 14 3 15 #"last-line-clean"
0 0 25 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                              ("
0 0 14 3 11 #"string-trim"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string-split"
0 0 25 3 1 #" "
0 0 14 3 15 #"last-line-clean"
0 0 25 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                              "
0 0 19 3 2 #"\"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 11 #"word-length"
0 0 25 3 6 #"     ("
0 0 14 3 13 #"string-length"
0 0 25 3 1 #" "
0 0 14 3 9 #"last-word"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 12 #"space-length"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 16 #"post-indentation"
0 0 25 3 1 #" "
0 0 14 3 11 #"word-length"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                              ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 16 #"post-indentation"
0 0 25 3 1 #" "
0 0 14 3 11 #"word-length"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 10 #"pre-spacer"
0 0 25 3 7 #"      ("
0 0 14 3 11 #"make-string"
0 0 25 3 1 #" "
0 0 14 3 15 #"pre-indentation"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 6 #"spacer"
0 0 25 3 11 #"          ("
0 0 14 3 11 #"make-string"
0 0 25 3 1 #" "
0 0 14 3 12 #"space-length"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 8 #"new-word"
0 0 25 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 14 3 10 #"pre-spacer"
0 0 25 3 1 #" "
0 0 14 3 9 #"last-word"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #")\""
0 0 25 3 1 #" "
0 0 14 3 6 #"spacer"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"; \""
0 0 25 3 1 #" "
0 0 14 3 12 #"last-comment"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 10 #"most-words"
0 0 25 3 7 #"      ("
0 0 14 3 12 #"all-but-last"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 10 #"most-words"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 8 #"new-word"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"all-but-last"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 45 #"; returns all but the last elements of a list"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 2 #">="
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 7 #"reverse"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 9         397 22           0 0           0 65 0 17 3 53
#"; the old ugly generate-provide-form without composex"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"generate-provide-form"
0 0 25 3 1 #" "
0 0 14 3 9 #"stx-lines"
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 64
#"; returns a complete provide form from the provided syntax lines"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 14 #"string-replace"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"(provide \""
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 7 #"println"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ("
0 0 14 3 4 #"sort"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 8 #"stx-line"
0 0 25 3 3 #") ("
0 0 14 3 21 #"generate-provide-line"
0 0 25 3 1 #" "
0 0 14 3 8 #"stx-line"
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 55 #"                                                       "
0 0 14 3 9 #"stx-lines"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 50 #"                                                  "
0 0 14 3 8 #"string<?"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                  "
0 0 19 3 3 #"\")\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 19 3 20 #"\"(provide          \""
0 0 25 3 1 #" "
0 0 19 3 11 #"\"(provide \""
0 0 25 3 2 #"))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"generate-provide-form"
0 0 25 3 1 #" "
0 0 14 3 9 #"stx-lines"
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 64
#"; returns a complete provide form from the provided syntax lines"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 14 #"generate-lines"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 8 #"stx-line"
0 0 25 3 3 #") ("
0 0 14 3 21 #"generate-provide-line"
0 0 25 3 1 #" "
0 0 14 3 8 #"stx-line"
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 6 #"))))  "
0 0 17 3 39 #"; prepare a function to generate lines,"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 8 #"composex"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string-replace"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"("
0 0 19 3 18 #"provide          \""
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"("
0 0 19 3 9 #"provide \""
0 0 25 3 22 #")                     "
0 0 17 3 40 #"; remove extra indentation on first line"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"("
0 0 19 3 9 #"provide \""
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 44 #")                                           "
0 0 17 3 25 #"; add provide form header"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 50 #")                                                 "
0 0 17 3 18 #"; concatenate them"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 7 #"println"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 58
#")                                                         "
0 0 17 3 22 #"; add carriage returns"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 17 #"close-parenthesis"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 38 #")                                     "
0 0 17 3 66
#"; add closing parenthesis for provide form - 9 chars = \"(provide \""
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 8 #"string<?"
0 0 25 3 56 #")                                                       "
0 0 17 3 11 #"; sort them"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 14 #"generate-lines"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 51 #"))                                                 "
0 0 17 3 16 #"; generate lines"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 9 #"stx-lines"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 8 #";;; main"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (("
0 0 14 3 9 #"stx-lines"
0 0 25 3 5 #"    ("
0 0 14 3 13 #"get-stx-lines"
0 0 25 3 20 #"                   ("
0 0 14 3 13 #"get-clipboard"
0 0 25 3 29 #")))                          "
0 0 17 3 58
#"; read the clipboard, convert its contents to syntax-lines"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 11 #"indentation"
0 0 25 3 3 #"  ("
0 0 14 3 28 #"get-length-of-longest-string"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 23 #"get-function-macro-name"
0 0 25 3 1 #" "
0 0 14 3 9 #"stx-lines"
0 0 25 3 5 #")))  "
0 0 17 3 51 #"; calculate the lendth of the longest function name"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 12 #"provide-form"
0 0 25 3 2 #" ("
0 0 14 3 21 #"generate-provide-form"
0 0 25 3 1 #" "
0 0 14 3 9 #"stx-lines"
0 0 25 3 1 #" "
0 0 14 3 11 #"indentation"
0 0 25 3 32 #")))                             "
0 0 17 3 52 #"; process syntax lines and generate the provide form"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"set-clipboard"
0 0 25 3 1 #" "
0 0 14 3 12 #"provide-form"
0 0 25 3 68
#"))                                                                  "
0 0 17 3 38 #"; and dump the form into the cliboard."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
